
import os
import json
import asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from fastapi import FastAPI, Request
from starlette.responses import Response
import uvicorn

print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

BANNED_FILE = "banned_words.json"

def load_banned_words():
    if not os.path.exists(BANNED_FILE):
        print("üìÇ –ù–µ—Ç —Ñ–∞–π–ª–∞ —Å–æ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞–º–∏. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π.")
        return []
    with open(BANNED_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_banned_words(words):
    with open(BANNED_FILE, "w", encoding="utf-8") as f:
        json.dump(words, f, ensure_ascii=False, indent=2)

BANNED_WORDS = load_banned_words()

async def delete_bad_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if update.message and update.message.text:
            text = update.message.text.lower()
            print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")
            for word in BANNED_WORDS:
                if word in text:
                    await update.message.delete()
                    print(f"üóë –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞ —Å–ª–æ–≤–æ: {word}")
                    break
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ delete_bad_messages: {e}")

async def add_spam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        print("üì• –ö–æ–º–∞–Ω–¥–∞ /spam:", context.args)
        if not context.args:
            await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /spam <—Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑–∞>")
            return
        phrase = " ".join(context.args).lower()
        if phrase not in BANNED_WORDS:
            BANNED_WORDS.append(phrase)
            save_banned_words(BANNED_WORDS)
            await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∞–º: {phrase}")
        else:
            await update.message.reply_text("üîÅ –£–∂–µ –≤ —Å–ø–∏—Å–∫–µ —Å–ø–∞–º–∞.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ add_spam: {e}")

async def remove_spam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        print("üì• –ö–æ–º–∞–Ω–¥–∞ /unspam:", context.args)
        if not context.args:
            await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /unspam <—Å–ª–æ–≤–æ>")
            return
        phrase = " ".join(context.args).lower()
        if phrase in BANNED_WORDS:
            BANNED_WORDS.remove(phrase)
            save_banned_words(BANNED_WORDS)
            await update.message.reply_text(f"‚ùå –£–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∞–º–∞: {phrase}")
        else:
            await update.message.reply_text("‚ùó –¢–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ remove_spam: {e}")

async def list_spam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        print("üì• –ö–æ–º–∞–Ω–¥–∞ /spamlist")
        if not BANNED_WORDS:
            await update.message.reply_text("üì≠ –°–ø–∏—Å–æ–∫ —Å–ø–∞–º–∞ –ø—É—Å—Ç.")
        else:
            text = "\n".join(f"- {w}" for w in BANNED_WORDS)
            await update.message.reply_text(f"üìÉ –°–ø–∏—Å–æ–∫ —Å–ø–∞–º–∞:\n{text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ list_spam: {e}")

# üîÅ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –ª–æ–≥
async def health_ping():
    while True:
        print("üíì –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω...")
        await asyncio.sleep(30)

TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

application = ApplicationBuilder().token(TOKEN).build()

application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), delete_bad_messages))
application.add_handler(CommandHandler("spam", add_spam))
application.add_handler(CommandHandler("unspam", remove_spam))
application.add_handler(CommandHandler("spamlist", list_spam))

fastapi_app = FastAPI()

@fastapi_app.get("/")
async def root():
    return {"status": "ok", "message": "Bot is running"}

@fastapi_app.on_event("startup")
async def startup():
    print("üåê FastAPI startup")
    await application.initialize()
    await application.bot.set_webhook(WEBHOOK_URL + "/webhook")
    await application.start()
    asyncio.create_task(health_ping())
    print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")

@fastapi_app.on_event("shutdown")
async def shutdown():
    print("üõë FastAPI shutdown triggered ‚Äî Render –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å")
    await application.stop()
    await application.bot.delete_webhook()
    print("üßπ Webhook —É–¥–∞–ª—ë–Ω, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")

@fastapi_app.post("/webhook")
async def telegram_webhook(req: Request):
    try:
        data = await req.json()
        update = Update.de_json(data, application.bot)
        await application.update_queue.put(update)
        print("üì© –ü—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ webhook: {e}")
    return Response(status_code=200)

if __name__ == "__main__":
    uvicorn.run(fastapi_app, host="0.0.0.0", port=int(os.getenv("PORT", 10000)))
