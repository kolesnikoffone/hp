import os
import logging
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, ContextTypes, MessageHandler,
    CommandHandler, filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger("bot")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
TOKEN = os.environ.get("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("BOT_TOKEN not found in environment variables")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–ø–∞–º-—Ñ—Ä–∞–∑
spam_words = set()

# –ö–æ–º–∞–Ω–¥–∞ /spam ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞ –≤ —Å–ø–∞–º
async def handle_spam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùó –£–∫–∞–∂–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∞–º.")
        return
    phrase = " ".join(context.args).lower()
    spam_words.add(phrase)
    await update.message.reply_text(f"üö´ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∞–º: {phrase}")

# –ö–æ–º–∞–Ω–¥–∞ /unspam ‚Äî —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–∞ –∏–∑ —Å–ø–∞–º–∞
async def handle_unspam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùó –£–∫–∞–∂–∏ —Ñ—Ä–∞–∑—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∞–º–∞.")
        return
    phrase = " ".join(context.args).lower()
    if phrase in spam_words:
        spam_words.remove(phrase)
        await update.message.reply_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∞–º–∞: {phrase}")
    else:
        await update.message.reply_text(f"‚ÑπÔ∏è –§—Ä–∞–∑–∞ '{phrase}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ —Å–ø–∞–º–∞.")

# –ö–æ–º–∞–Ω–¥–∞ /spamlist ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–ø–∞–º-—Ñ—Ä–∞–∑—ã
async def handle_spamlist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not spam_words:
        await update.message.reply_text("üì≠ –°–ø–∏—Å–æ–∫ —Å–ø–∞–º-—Ñ—Ä–∞–∑ –ø—É—Å—Ç.")
    else:
        await update.message.reply_text("üìÉ –°–ø–∞–º-—Ñ—Ä–∞–∑—ã:\n" + "\n".join(spam_words))

# –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    # –ë–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –æ–±—ã—á–Ω–æ–≥–æ –∏–ª–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    msg_text = ""
    if update.message.text:
        msg_text = update.message.text.lower()
    elif update.message.caption:
        msg_text = update.message.caption.lower()

    logger.info(f"üì© –ü—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg_text}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ —Ñ—Ä–∞–∑
    for spam_phrase in spam_words:
        if spam_phrase in msg_text:
            try:
                await context.bot.delete_message(
                    chat_id=update.message.chat_id,
                    message_id=update.message.message_id
                )
                logger.info(f"üíî –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg_text}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
            return  # –Ω–∞—à–ª–∏ ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å

if __name__ == "__main__":
    application = ApplicationBuilder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("spam", handle_spam))
    application.add_handler(CommandHandler("unspam", handle_unspam))
    application.add_handler(CommandHandler("spamlist", handle_spamlist))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()
