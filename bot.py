import os
import logging
import asyncio
from telegram import Update, Message
from telegram.ext import (ApplicationBuilder, ContextTypes, MessageHandler,
                          CommandHandler, filters)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger("bot")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
TOKEN = os.environ.get("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("BOT_TOKEN not found in environment variables")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–ø–∞–º-—Å–ª–æ–≤ –∏ —Ñ—Ä–∞–∑
spam_words = set()

# --- –ö–æ–º–∞–Ω–¥—ã --- #

async def handle_spam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        msg = await update.message.reply_text("‚ùó –£–∫–∞–∂–∏ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∞–º.")
        await asyncio.sleep(5)
        await msg.delete()
        await update.message.delete()
        return
    phrase = " ".join(context.args).lower()
    spam_words.add(phrase)
    msg = await update.message.reply_text(f"üö´ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∞–º: {phrase}")
    await asyncio.sleep(5)
    await msg.delete()
    await update.message.delete()

async def handle_unspam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        msg = await update.message.reply_text("‚ùó –£–∫–∞–∂–∏ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∞–º–∞.")
        await asyncio.sleep(5)
        await msg.delete()
        await update.message.delete()
        return
    phrase = " ".join(context.args).lower()
    spam_words.discard(phrase)
    msg = await update.message.reply_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∞–º–∞: {phrase}")
    await asyncio.sleep(5)
    await msg.delete()
    await update.message.delete()

async def handle_spamlist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not spam_words:
        msg = await update.message.reply_text("üì≠ –°–ø–∏—Å–æ–∫ —Å–ø–∞–º-—Å–ª–æ–≤ –ø—É—Å—Ç.")
    else:
        msg = await update.message.reply_text("üìÉ –°–ø–∞–º-—Å–ª–æ–≤–∞:\n" + "\n".join(spam_words))
    await asyncio.sleep(5)
    await msg.delete()
    await update.message.delete()

# --- –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π --- #

def extract_text(message: Message) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    if message.text:
        return message.text
    if message.caption:
        return message.caption
    return ""

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg_text = extract_text(update.message).lower()

    # –ï—Å–ª–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é
    if update.message.forward_from_chat and update.message.caption:
        msg_text = update.message.caption.lower()

    logger.info(f"üì© –ü—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg_text}")

    if any(spam_word in msg_text for spam_word in spam_words):
        try:
            await context.bot.delete_message(chat_id=update.message.chat_id,
                                             message_id=update.message.message_id)
            logger.info(f"üíî –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg_text}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")

# --- –ó–∞–ø—É—Å–∫ --- #

if __name__ == "__main__":
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("spam", handle_spam))
    application.add_handler(CommandHandler("unspam", handle_unspam))
    application.add_handler(CommandHandler("spamlist", handle_spamlist))
    application.add_handler(MessageHandler(filters.ALL, handle_message))

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()
