import os
import logging
from telegram import Update
from telegram.ext import (ApplicationBuilder, ContextTypes, MessageHandler,
                          CommandHandler, filters)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger("bot")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
TOKEN = os.environ.get("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("BOT_TOKEN not found in environment variables")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–ø–∞–º-—Å–ª–æ–≤
spam_words = set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /spam
async def handle_spam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùó –£–∫–∞–∂–∏ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∞–º.")
        return
    spam_word = " ".join(context.args).lower()
    spam_words.add(spam_word)
    await update.message.reply_text(f"üö´ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∞–º: {spam_word}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /unspam
async def handle_unspam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùó –£–∫–∞–∂–∏ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∞–º–∞.")
        return
    spam_word = " ".join(context.args).lower()
    spam_words.discard(spam_word)
    await update.message.reply_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∞–º–∞: {spam_word}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /spamlist
async def handle_spamlist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not spam_words:
        await update.message.reply_text("üì≠ –°–ø–∏—Å–æ–∫ —Å–ø–∞–º-—Å–ª–æ–≤ –ø—É—Å—Ç.")
    else:
        await update.message.reply_text("üìÉ –°–ø–∞–º-—Å–ª–æ–≤–∞: " + ", ".join(spam_words))

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
def extract_text(message):
    if message.text:
        return message.text
    if message.caption:
        return message.caption
    return ""

# –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    msg_text = extract_text(message).lower()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    should_delete = any(spam_word in msg_text for spam_word in spam_words)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏–ª–∏
    if message.reply_to_message:
        replied_text = extract_text(message.reply_to_message).lower()
        if any(spam_word in replied_text for spam_word in spam_words):
            should_delete = True
            try:
                await context.bot.delete_message(chat_id=message.chat_id,
                                                 message_id=message.reply_to_message.message_id)
                logger.info(f"üíî –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ-–æ—Ç–≤–µ—Ç: {replied_text}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")

    if should_delete:
        try:
            await context.bot.delete_message(chat_id=message.chat_id,
                                             message_id=message.message_id)
            logger.info(f"üíî –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg_text}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")

if __name__ == "__main__":
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("spam", handle_spam))
    application.add_handler(CommandHandler("unspam", handle_unspam))
    application.add_handler(CommandHandler("spamlist", handle_spamlist))
    application.add_handler(MessageHandler(filters.ALL, handle_message))

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()
