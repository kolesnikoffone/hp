import os
import logging
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger("bot")

# –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("BOT_TOKEN not found in environment variables")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–ø–∞–º-—Ñ—Ä–∞–∑
spam_phrases = set()

# –ö–æ–º–∞–Ω–¥–∞ /spam –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ—Ä–∞–∑
async def handle_spam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    phrase = text.partition(' ')[2].strip()
    if not phrase:
        await update.message.reply_text("‚ùó –£–∫–∞–∂–∏ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∞–º.")
        return
    spam_phrases.add(phrase.lower())
    await update.message.reply_text(f"üö´ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∞–º: {phrase}")

# –ö–æ–º–∞–Ω–¥–∞ /unspam –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ—Ä–∞–∑
async def handle_unspam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    phrase = text.partition(' ')[2].strip()
    if not phrase:
        await update.message.reply_text("‚ùó –£–∫–∞–∂–∏ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∞–º–∞.")
        return
    if phrase.lower() in spam_phrases:
        spam_phrases.remove(phrase.lower())
        await update.message.reply_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∞–º–∞: {phrase}")
    else:
        await update.message.reply_text("üì≠ –¢–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –∏–ª–∏ —Ñ—Ä–∞–∑—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")

# –ö–æ–º–∞–Ω–¥–∞ /spamlist –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ—Ä–∞–∑
async def handle_spamlist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not spam_phrases:
        await update.message.reply_text("üì≠ –°–ø–∏—Å–æ–∫ —Å–ø–∞–º-—Å–ª–æ–≤ –ø—É—Å—Ç.")
    else:
        await update.message.reply_text("üìÉ –°–ø–∞–º-—Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã:\n" + "\n".join(spam_phrases))

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg_text = update.message.text.lower()
    logger.info(f"üì© –ü—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg_text}")
    for phrase in spam_phrases:
        if phrase in msg_text:
            try:
                await context.bot.delete_message(chat_id=update.message.chat_id,
                                                 message_id=update.message.message_id)
                logger.info(f"üíî –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg_text}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            break

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("spam", handle_spam))
    app.add_handler(CommandHandler("unspam", handle_unspam))
    app.add_handler(CommandHandler("spamlist", handle_spamlist))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()
