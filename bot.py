import os
import asyncio
import logging
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, ContextTypes,
    CommandHandler, MessageHandler, filters
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger("bot")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
TOKEN = os.environ.get("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("BOT_TOKEN not found in environment variables")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–ø–∞–º-—Å–ª–æ–≤
spam_words = set()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
async def delete_after_delay(bot, chat_id, message_id, delay=5):
    await asyncio.sleep(delay)
    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /spam
async def handle_spam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        reply = await update.message.reply_text("‚ùó –£–∫–∞–∂–∏ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∞–º.")
    else:
        for word in context.args:
            spam_words.add(word.lower())
        reply = await update.message.reply_text(f"üö´ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∞–º: {context.args}")
    
    asyncio.create_task(delete_after_delay(context.bot, update.message.chat_id, update.message.message_id))
    asyncio.create_task(delete_after_delay(context.bot, reply.chat_id, reply.message_id))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /unspam
async def handle_unspam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        reply = await update.message.reply_text("‚ùó –£–∫–∞–∂–∏ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∞–º–∞.")
    else:
        for word in context.args:
            spam_words.discard(word.lower())
        reply = await update.message.reply_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∞–º–∞: {context.args}")

    asyncio.create_task(delete_after_delay(context.bot, update.message.chat_id, update.message.message_id))
    asyncio.create_task(delete_after_delay(context.bot, reply.chat_id, reply.message_id))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /spamlist
async def handle_spamlist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not spam_words:
        reply = await update.message.reply_text("üì≠ –°–ø–∏—Å–æ–∫ —Å–ø–∞–º-—Å–ª–æ–≤ –ø—É—Å—Ç.")
    else:
        reply = await update.message.reply_text("üìÉ –°–ø–∞–º-—Å–ª–æ–≤–∞: " + ", ".join(spam_words))
    
    asyncio.create_task(delete_after_delay(context.bot, update.message.chat_id, update.message.message_id))
    asyncio.create_task(delete_after_delay(context.bot, reply.chat_id, reply.message_id))

# –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text_variants = []
    if update.message.text:
        text_variants.append(update.message.text.lower())
    if update.message.reply_to_message and update.message.reply_to_message.text:
        text_variants.append(update.message.reply_to_message.text.lower())
    if update.message.forward_from and update.message.text:
        text_variants.append(update.message.text.lower())

    for text in text_variants:
        if any(word == text for word in spam_words) or any(f" {word} " in f" {text} " for word in spam_words):
            try:
                await context.bot.delete_message(chat_id=update.message.chat_id,
                                                 message_id=update.message.message_id)
                logger.info(f"üíî –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
            break  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ö–æ—Ç—å –æ–¥–Ω–æ, –¥–∞–ª—å—à–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º

if __name__ == "__main__":
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("spam", handle_spam))
    application.add_handler(CommandHandler("unspam", handle_unspam))
    application.add_handler(CommandHandler("spamlist", handle_spamlist))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()
